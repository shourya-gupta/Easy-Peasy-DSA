Question: https://leetcode.com/problems/bitwise-xor-of-all-pairings/description/

Code:

class Solution {
    public int xorAllNums(int[] nums1, int[] nums2) {
        
        // let us take up an example and understand how to approach this problem

        // num1 = [2,1,3], num2 = [10,2,5,0]

        // Pairs:
        // (2,10),(2,2),(2,5),(2,0),
        // (1,10),(1,2),(1,5),(1,0),
        // (3,10),(3,2),(3,5),(3,0)

        // Let us rearrange things up:
        // (2,2,2,2), (10,2,5,0)
        // (1,1,1,1), (10,2,5,0)
        // (3,3,3,3), (10,2,5,0)

        // Now we know for even occurences - the xor is = 0

        // We can now build the idea that if odd length num1 is paired with an even length num2 
        // Then, num2's xor would be result

        // If even length num1 is paired with odd length num2
        // Then, num1's xor is result

        // If even length num1 and even length num2
        // Then, 0

        // If odd length num1 and odd length num2
        // Then (xor of num1)xor(xor of num2)

        int len1 = nums1.length;
        int len2 = nums2.length;

        int res = 0;

        if(len1%2 != 0) // if num1 is odd
        {
            // first case
            for(int i=0;i<len2;i++)
            {
                res = res^nums2[i];
            }           
        }

        if(len2%2 != 0) // if num2 is odd
        {
            // second case
            for(int i=0;i<len1;i++)
            {
                res = res^nums1[i];
            }           
        }

        // fourth case: both if will run
        // third case: no if will execute - res = 0

        return res;
    }
}
